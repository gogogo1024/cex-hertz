// Code generated by hertz generator.

package main

import (
	"cex-hertz/biz/dal/pg"
	"cex-hertz/biz/handler"
	"cex-hertz/biz/service"
	"cex-hertz/biz/util"
	"cex-hertz/conf"
	"cex-hertz/middleware"
	cexserver "cex-hertz/server"
	"context"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	"github.com/hertz-contrib/pprof"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
	"os"
	"os/signal"
	"syscall"
)

func main() {
	cfg := conf.GetConf()

	// 初始化 GORM DB
	if err := pg.InitGorm(); err != nil {
		panic("GORM DB 初始化失败: " + err.Error())
	}
	if err := pg.AutoMigrate(); err != nil {
		panic("GORM 自动迁移失败: " + err.Error())
	}

	h := server.Default()
	hsPort := cfg.Hertz.WsPort
	if len(hsPort) > 0 && hsPort[0] == ':' {
		hsPort = hsPort[1:]
	}
	wsServer := cexserver.NewWebSocketServer(":" + hsPort)

	defer h.Shutdown(context.Background())
	defer wsServer.Shutdown(context.Background())

	// 初始化 Postgres 连接池（如有需要可调用对应初始化）
	// 初始化 Kafka Writer
	service.InitKafkaWriter(cfg.Kafka.Brokers, cfg.Kafka.Topic)

	// 初始化 Consul 并注册撮合引擎节点
	consulAddrs := cfg.Registry.RegistryAddress // []string
	if len(consulAddrs) == 0 {
		panic("Consul address list is empty")
	}
	nodeID := cfg.MatchEngine.NodeID
	matchPairs := cfg.MatchEngine.MatchPairs
	matchPort := cfg.MatchEngine.MatchPort
	pairs := util.ParsePairs(matchPairs)
	// 使用多地址高可用
	consulHelper, err := service.NewConsulHelperWithAddrs(consulAddrs)
	if err != nil {
		panic(err)
	}
	if err := service.InitMatchEngineWithHelper(consulHelper, nodeID, pairs, matchPort); err != nil {
		panic(err)
	}

	// 启动基于 Consul 分布式锁的 K 线补偿定时任务
	if consulHelper.Client() != nil {
		service.StartKlineCompensateTask(consulHelper.Client())
	}

	registerMiddleware(h)
	registerRoutes(h)

	go func() {
		h.Spin()
	}()
	go func() {
		wsServer.Spin()
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
}

func registerMiddleware(h *server.Hertz) {

	hlog.SetLevel(conf.LogLevel())
	hlog.SetOutput(zapcore.AddSync(&lumberjack.Logger{
		Filename:   conf.GetConf().Hertz.LogFileName,
		MaxSize:    conf.GetConf().Hertz.LogMaxSize,
		MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
		MaxAge:     conf.GetConf().Hertz.LogMaxAge,
	}))
	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery())

	// cores
	h.Use(cors.Default())
	middleware.Register(h)
}

func registerRoutes(h *server.Hertz) {
	h.GET("/ping", handler.Ping)
	orderGroup := h.Group("/api")
	orderGroup.Use(middleware.DistributedRouteMiddleware())
	orderGroup.POST("/order", handler.SubmitOrder)
	orderGroup.GET("/order/:id", handler.GetOrder)
	orderGroup.GET("/orders", handler.ListOrders)
	orderGroup.POST("/order/cancel", handler.CancelOrder)
	orderGroup.GET("/balance", handler.GetBalance)
	orderGroup.GET("/positions", handler.GetPositions)
	orderGroup.GET("/depth", handler.GetDepth)
	orderGroup.GET("/trades", handler.GetTrades)
	orderGroup.GET("/ticker", handler.GetTicker)
	orderGroup.GET("/kline", handler.GetKline)
}
