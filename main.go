// Code generated by hertz generator.

package main

import (
	"cex-hertz/biz/handler"
	"cex-hertz/biz/service"
	"cex-hertz/biz/util"
	"cex-hertz/conf"
	cexserver "cex-hertz/server"
	"context"
	"github.com/cloudwego/hertz/pkg/app/server"
	"os"
	"os/signal"
	"syscall"
)

func main() {
	cfg := conf.GetConf()

	h := server.Default()
	hsPort := cfg.Hertz.WsPort
	if len(hsPort) > 0 && hsPort[0] == ':' {
		hsPort = hsPort[1:]
	}
	wsServer := cexserver.NewWebSocketServer(":" + hsPort)

	defer h.Shutdown(context.Background())
	defer wsServer.Shutdown(context.Background())

	// 初始化 Postgres 连接池（如有需要可调用对应初始化）
	// 初始化 Kafka Writer
	service.InitKafkaWriter(cfg.Kafka.Brokers, cfg.Kafka.Topic)

	// 初始化 Consul 并注册撮合引擎节点
	consulAddrs := cfg.Registry.RegistryAddress // []string
	if len(consulAddrs) == 0 {
		panic("Consul address list is empty")
	}
	nodeID := cfg.MatchEngine.NodeID
	matchPairs := cfg.MatchEngine.MatchPairs
	matchPort := cfg.MatchEngine.MatchPort
	pairs := util.ParsePairs(matchPairs)
	// 使用多地址高可用
	consulHelper, err := service.NewConsulHelperWithAddrs(consulAddrs)
	if err != nil {
		panic(err)
	}
	if err := service.InitMatchEngineWithHelper(consulHelper, nodeID, pairs, matchPort); err != nil {
		panic(err)
	}

	registerMiddleware(h)
	registerRoutes(h)

	go func() {
		h.Spin()
	}()
	go func() {
		wsServer.Spin()
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
}

func registerMiddleware(h *server.Hertz) {
	// 可在此注册全局中间件，如日志、恢复、CORS等
	// h.Use(recovery.Recovery())
	// h.Use(cors.Default())
}

func registerRoutes(h *server.Hertz) {
	h.GET("/ping", handler.Ping)
	orderGroup := h.Group("/api")
	orderGroup.Use(handler.DistributedRouteMiddleware())
	orderGroup.POST("/order", handler.SubmitOrder)
}
