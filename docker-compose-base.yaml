version: '3.8'
services:
  consul:
    image: 'hashicorp/consul'
    ports:
      - 8500:8500
    healthcheck:
      test: [ "CMD", "consul", "members" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s
  pg:
    image: 'postgres:15'
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  redis:
    image: 'redis:latest'
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 2m
  kafka:
    image: 'confluentinc/cp-kafka:latest'
    ports:
      - "9092:9092"
    environment:
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_NODE_ID=1
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@localhost:9093
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:19092
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CREATE_TOPICS=order:3:1,trade:3:1,dropped_test:1:1
      - CLUSTER_ID=kraft-cluster-1
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 40s
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:19092
    depends_on:
      - kafka
    restart: always
  kafka-init:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        sleep 10 && \
        kafka-topics --create --if-not-exists --topic order --bootstrap-server kafka:19092 --partitions 3 --replication-factor 1 || true
        kafka-topics --create --if-not-exists --topic trade --bootstrap-server kafka:19092 --partitions 3 --replication-factor 1 || true
        kafka-topics --create --if-not-exists --topic dropped_test --bootstrap-server kafka:19092 --partitions 1 --replication-factor 1 || true
volumes:
  kafka_data:
